#//---------------------------------------------------------------------------- 
#//                     Software License Agreement                       
#//                                                                      
#// Copyright 2011-2016, RFXCOM 
#// 
#// ALL RIGHTS RESERVED. This code is owned by RFXCOM, and is protected under 
#// Netherlands Copyright Laws and Treaties and shall be subject to the  
#// exclusive jurisdiction of the Netherlands Courts. The information from this 
#// file may freely be used to create programs to exclusively interface with 
#// RFXCOM products only. Any other use or unauthorized reprint of this material 
#// is prohibited. No part of this file may be reproduced or transmitted in 
#// any form or by any means, electronic or mechanical, including photocopying, 
#// recording, or by any information storage and retrieval system without 
#// express written permission from RFXCOM. 
#// 
#// The above copyright notice shall be included in all copies or substantial 
#// portions of this Software. 
#//----------------------------------------------------------------------------- 

# Possible protocols for key(rfxtrx.protocol.enable): 
#      TX, RX/TX , or RX only : depending the RFXCOM device model
#      please refer to RFXCOM http://www.rfxcom.com for more details 'RFXtrx User Guide.pdf'
#      in Downloads sections.
# AC
# AD LightwaveRF
# AE Blyss
# Alecto
# ARC
# ATI/cartelectronic
# Atlantic
# Banggood
# BlindsT0
# BlindsT1/T2/T3/T4
# Byron SX
# Cresta
# Davis AU
# Davis EU
# Davis US
# Edisio
# FineOffset
# FS20
# FunkBus
# Hideki
# HomeConfort
# HomeEasy EU
# Honeywell Chime
# Imagintronix
# Itho CVE ECO RFT
# Itho CVE RFT
# Keeloq
# La Crosse
# Legrand CAD
# Lighting4
# MCZ
# Meiantech
# Mertik
# Opus 
# Oregon Scientific
# ProGuard
# Revolt
# RSL
# Rubicson
# SelectPlus
# TFA
# undec on
# UPM
# Viking
# Visonic
# X10

# Configuration
# In value use {{}} to include value of other parameter
#    example  
#        message.who=world
#		 message.hello=Hello {{message.who}}
#  therefore message.hello is 'Hello world'
#

# comma separated protocol/brand
rfxtrx.protocol.enable=ARC,Lighting4,X10,undec on

# set xmit power between -18dBm and +13dBm (maximum allowed is 10dBm)
# This TX power is only available for RFXtrx868X and RFXtrxIOT
#rfxtrx.protocol.txpower=+10dBm

# select the RX frequency (available frequencies depends on RFCOM model)
#rfxtrx.protocol.frequency=433.92MHz

# In Linux be sure that process user id is allowed to read/write
# on the device 
#   (e.g: user is member of dialout group ( secondary group) )
# Linux FTDI (USB to serial adapter) device path , e.g. /dev/ttyUSB0
rfxtrx.transport.linux.device.path=/home/edevaux/projects/Raspberry/remttyUSB
#rfxtrx.transport.linux.device.path=/dev/ttyUSB0
# Linux command to execute to configure the device : TX/RX 38400 bauds, 8 bits, no parity 1 bit stop.
rfxtrx.transport.linux.device.configcommand=stty -F {{rfxtrx.transport.linux.device.path}} ispeed 38400 ospeed 38400 raw cs8 -cstopb -parenb -clocal
rfxtrx;protocol.event.path=/home/edevaux/projects/Raspberry
# the input is a *nix named pipe that is created if not present.
rfxtrx.protocol.input.path={{rfxtrx;protocol.event.path}}/pipeMsgSend
# the command to execute to create the named pipe
rfxtrx.protocol.input.path.configcommand=mkfifo {{rfxtrx.protocol.input.path}}
# default script to invoke if the message type.subtype is not defined
rfxtrx.protocol.event.default={{rfxtrx;protocol.event.path}}/event.sh "Default"
# Command to invoke for type 0x13 and subtype 0x00
rfxtrx.protocol.event.13.00={{rfxtrx;protocol.event.path}}/event.sh "Lighting4"
# Command to invoke for type 0x03 and subtype 0x01
rfxtrx.protocol.event.03.01={{rfxtrx;protocol.event.path}}/event.sh "undec on"


